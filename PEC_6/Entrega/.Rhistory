PhiTpos2(-10,4)
PhiTpos2(-10,16)
PhiTpos2(-10,25)
PhiTpos2(-10,36)
PhiTpos2(-10,100)
PhiTpos=function(x,m)
{
return(0.5+trap(phi,0,x,m))
}
PhiT=function(x)
{
if(x>=0) return(PhiTpos(x))
else return(1-PhiTpos(-x))
}
n=seq(1,1000,50)
u=trap(phi,0,10,n)
vec_h=c(2,5,10,100,1000)
index=c(1,2,3,4,5)
vda=c()
for(i in vec_h){
a= findiff(BScall,99,i)
vda=c(vda,a)
}
a= trap(phi,0,10,n)
vec_h=c(2,5,10,100,1000)
index=c(1,2,3,4,5)
vda=c()
for(i in vec_h){
a= trap(phi,0,10,i)
vda=c(vda,a)
}
vda
for(i in vec_h){
a= trap(phi,0,2,i)
vda=c(vda,a)
}
vda
trap(phi,0,2,2)
trap(phi,0,2,10)
trap(phi,0,2,100)
vda=c()
for(i in vec_h){
a= trap(phi,0,2,i)
print(a)
#vda=c(vda,a)
}
vec_h=c(2,5,10,100,1000)
index=c(1,2,3,4,5)
vda=c()
for(i in vec_h){
a= trap(phi,0,2,i)
print(a)
vda=c(vda,a)
}
plot(index,vda, type="b")
par(mar=c(1,1,1,1))
plot(index,vda, type="b")
PhiTpos2=function(x,n)
{
return(0.5+trap(phi,0,2,n)),2
}
PhiTpos2=function(x,n)
{
return((0.5+trap(phi,0,2,n)),2)
}
PhiTpos2=function(x)
{
return((0.5+trap(phi,0,2,10)),2)
}
PhiTpos2(2)
PhiTpos2(2)[|]
PhiTpos2(2)[1]
PhiTpos2(2)
PhiTpos2=function(x)
{
return(list(0.5+trap(phi,0,2,10),2))
}
PhiTpos2(2)
PhiTpos2(2)[1]
PhiTpos2(2)[0]
PhiTpos2(2)[2]
PhiTpos2(2)[2]*2
PhiTpos2(2)[2][1]*2
PhiTpos2(2)[2]
PhiTpos2(2)[2][1]
PhiTpos2(2)[2]$value
PhiTpos2(2)[2]
PhiTpos2(2)[[1]]
PhiTpos2(2)[[2]]
PhiTpos2(2)[[2]]*1
#parametros de la opcion
S=95
K=95
r=0.001
sigma=0.3
T=0.25
#distintas formas de calcular Phi
#formula de Hastings
te=function(x)
{
alpha=0.2316419
return(1/(1+alpha*x))
}
phi=function(x)
{
return((1/sqrt(2*pi))*exp(-x^2/2))
}
PhiHpos=function(x)
{
a1=0.319381530
a2=-0.356563782
a3=1.781477937
a4=-1.821255978
a5=1.330274429
t=te(x)
Phitilde=1-phi(x)*(a1*t+a2*t^2+a3*t^3+a4*t^4+a5*t^5)
return(Phitilde)
}
PhiH=function(x)
{
if(x>=0) return(PhiHpos(x))
else return(1-PhiHpos(-x))
}
#regla de los trapecios
trap=function(f,a,b,m)
{
x=seq(a,b,length.out=m+1)
y=f(x)
p.area=sum((y[2:(m+1)]+y[1:m]))
p.area=p.area*abs(b-a)/(2*m)
return(p.area)
}
PhiTpos=function(x)
{
return(0.5+trap(phi,0,x,100))
}
PhiT=function(x)
{
if(x>=0) return(PhiTpos(x))
else return(1-PhiTpos(-x))
}
#regla de Simpson
simp=function(f,a,b,m)
{
x.ends=seq(a,b,length.out=m+1)
y.ends=f(x.ends)
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
y.mids=f(x.mids)
p.area=sum(y.ends[2:(m+1)]+4*y.mids [1: m ]+y.ends[1:m])
p.area=p.area * abs(b - a) / (6 * m)
return(p.area)
}
PhiSpos=function(x)
{
return(0.5+simp(phi,0,x,10))
}
PhiS=function(x)
{
if(x>=0) return(PhiSpos(x))
else return(1-PhiSpos(-x))
}
#Monte Carlo
mcint=function(f,a,b,m)
{
set.seed(5)
x=runif(m,min=a,max=b)
y.hat=f(x)
area=area <- (b - a) * sum(y.hat) / m
return(area)
}
PhiMCpos=function(x)
{
return(0.5+mcint(phi,0,x,2))
}
PhiMC=function(x)
{
if(x>=0) return(PhiMCpos(x))
else return(1-PhiMCpos(-x))
}
#precio de la call
BScall=function(x)
{
d1=(log(S/K)+(r+0.5*sigma^2)*(T))/(sigma*sqrt(T))
d2=d1-sigma*sqrt(T)
call=S*x(d1)-exp(-r*T)*K*x(d2)
return(call)
}
vPhiH=BScall(PhiH) #valor con la Phi de Hastings
vPhiT=BScall(PhiT) #valor con la Phi de trapecios
vPhiS=BScall(PhiS) #valor con la Phi de Simpson
vPhiMC=BScall(PhiMC) #valor con la Phi de Monte Carlo
#errores
abserrT=abs(vPhiT-vPhiH)
relerrT=abserrT/vPhiH
abserrS=abs(vPhiS-vPhiH)
relerrS=abserrS/vPhiH
abserrMC=abs(vPhiMC-vPhiH)
relerrMC=abserrMC/vPhiH
PhiTpos2=function(x)
{
return(list(0.5+trap(phi,0,2,10),2))
}
compare = function(f){
e=f(n)
return(e)
}
w=compare(PhiTpos2)
n=seq(1,1000,50)
u=trap(phi,0,10,n)
vec_h=c(2,5,10,100,1000)
index=c(1,2,3,4,5)
vda=c()
for(i in vec_h){
a= trap(phi,0,2,i)
print(a)
vda=c(vda,a)
}
plot(index,vda, type="b")
vPhiH
vPhiS
vPhiT
vPhiMC
#parametros de la opcion
S=95
K=95
r=0.001
sigma=0.3
T=0.25
#distintas formas de calcular Phi
#formula de Hastings
te=function(x)
{
alpha=0.2316419
return(1/(1+alpha*x))
}
phi=function(x)
{
return((1/sqrt(2*pi))*exp(-x^2/2))
}
PhiHpos=function(x)
{
a1=0.319381530
a2=-0.356563782
a3=1.781477937
a4=-1.821255978
a5=1.330274429
t=te(x)
Phitilde=1-phi(x)*(a1*t+a2*t^2+a3*t^3+a4*t^4+a5*t^5)
return(Phitilde)
}
PhiH=function(x)
{
if(x>=0) return(PhiHpos(x))
else return(1-PhiHpos(-x))
}
#regla de los trapecios
trap=function(f,a,b,m)
{
x=seq(a,b,length.out=m+1)
y=f(x)
p.area=sum((y[2:(m+1)]+y[1:m]))
p.area=p.area*abs(b-a)/(2*m)
return(p.area)
}
PhiTpos=function(x)
{
return(0.5+trap(phi,0,x,2))
}
PhiT=function(x)
{
if(x>=0) return(PhiTpos(x))
else return(1-PhiTpos(-x))
}
#regla de Simpson
simp=function(f,a,b,m)
{
x.ends=seq(a,b,length.out=m+1)
y.ends=f(x.ends)
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
y.mids=f(x.mids)
p.area=sum(y.ends[2:(m+1)]+4*y.mids [1: m ]+y.ends[1:m])
p.area=p.area * abs(b - a) / (6 * m)
return(p.area)
}
PhiSpos=function(x)
{
return(0.5+simp(phi,0,x,10))
}
PhiS=function(x)
{
if(x>=0) return(PhiSpos(x))
else return(1-PhiSpos(-x))
}
#Monte Carlo
mcint=function(f,a,b,m)
{
set.seed(5)
x=runif(m,min=a,max=b)
y.hat=f(x)
area=area <- (b - a) * sum(y.hat) / m
return(area)
}
PhiMCpos=function(x)
{
return(0.5+mcint(phi,0,x,2))
}
PhiMC=function(x)
{
if(x>=0) return(PhiMCpos(x))
else return(1-PhiMCpos(-x))
}
#precio de la call
BScall=function(x)
{
d1=(log(S/K)+(r+0.5*sigma^2)*(T))/(sigma*sqrt(T))
d2=d1-sigma*sqrt(T)
call=S*x(d1)-exp(-r*T)*K*x(d2)
return(call)
}
vPhiH=BScall(PhiH) #valor con la Phi de Hastings
vPhiT=BScall(PhiT) #valor con la Phi de trapecios
vPhiS=BScall(PhiS) #valor con la Phi de Simpson
vPhiMC=BScall(PhiMC) #valor con la Phi de Monte Carlo
#errores
abserrT=abs(vPhiT-vPhiH)
relerrT=abserrT/vPhiH
abserrS=abs(vPhiS-vPhiH)
relerrS=abserrS/vPhiH
abserrMC=abs(vPhiMC-vPhiH)
relerrMC=abserrMC/vPhiH
PhiTpos2=function(x)
{
return(list(0.5+trap(phi,0,2,10),2))
}
compare = function(f){
e=f(n)
return(e)
}
w=compare(PhiTpos2)
n=seq(1,1000,50)
u=trap(phi,0,10,n)
vec_h=c(2,5,10,100,1000)
index=c(1,2,3,4,5)
vda=c()
for(i in vec_h){
a= trap(phi,0,2,i)
print(a)
vda=c(vda,a)
}
plot(index,vda, type="b")
vPhiH
vPhiS
vPhiS
vPhiT
trap(phi,0,2,1)
trap(phi,0,2,2)
trap(phi,0,2,10)
trap(phi,0,2,100)
trap(phi,0,2,200)
trap(phi,0,2,300)
trap(phi,0,2,1000)
x.ends=seq(a,b,length.out=m+1)
x.ends=seq(0,2,11)
x.ends
x.ends=seq(0,2,length.out=11)
x.ends
x.mids=(x.ends[2:(11)]-x.ends[1:10])/2+x.ends[1:10]
x.mids
x.ends=seq(0,2,length.out=10)
x.ends
x.mids=(x.ends[2:(10)]-x.ends[1:9])/2+x.ends[1:9]
x.mids
x.ends[2:(m+1)]
x.ends[2:(101)]
x.ends[2:(10)]
x.ends[1:m]
x.ends[1:10]
x.ends[2:(10)]-x.ends[1:10]
w=10
x.ends=seq(a,b,length.out=w+1)
x.ends=seq(0,1,length.out=w+1)
x.ends[2:(w+1)]-x.ends[1:w]
x.ends[2:(m+1)]
x.ends[2:(w+1)]
x.ends
x.ends=seq(a,b,length.out=m+1)
x.ends=seq(0,2,length.out=m+1)
x.ends=seq(0,2,length.out=w+1)
x.ends
x.ends[2:w+1]
x.ends[2:(w+1)]
x.ends[1:w]
x.ends[2:(w+1)]-x.ends[1:w]
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
x.mids=(x.ends[2:(w+1)]-x.ends[1:w])/2+x.ends[1:w]
x.mids
x.ends
m=10
x.ends=seq(a,b,length.out=m+1)
a=0
b=2
x.ends=seq(a,b,length.out=m+1)
y.ends=f(x.ends)
simp=function(f,a,b,m)
{
# definiremos los puntos laterales y medio donde evaluaremos la funcion
x.ends=seq(a,b,length.out=m+1)
print(x.ends)
y.ends=f(x.ends)
print(y.ends)
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
print(x.mids)
y.mids=f(x.mids)
print(y.mids)
# de tal forma que el area correspondera a la sumade 4 veces los valores intermedios,
# dos veces los valores laterales y solo añadiremos
# una vez cada valor extremo
p.area=sum(y.ends[2:(m+1)]+4*y.mids [1: m ]+y.ends[1:m])
p.area=p.area * abs(b - a) / (6 * m)
return(p.area)
}
simp(phi,0,2,10)
simp(phi,0,2,10)
printy.ends[1:m]
simp=function(f,a,b,m)
{
# definiremos los puntos laterales y medio donde evaluaremos la funcion
x.ends=seq(a,b,length.out=m+1)
print(x.ends)
y.ends=f(x.ends)
print(y.ends)
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
print(x.mids)
y.mids=f(x.mids)
print(y.mids)
# de tal forma que el area correspondera a la sumade 4 veces los valores intermedios,
# dos veces los valores laterales y solo añadiremos
# una vez cada valor extremo
print(y.ends[2:(m+1)])
print(y.ends[1:m])
p.area=sum(y.ends[2:(m+1)]+4*y.mids [1: m ]+)
simp=function(f,a,b,m)
{
# definiremos los puntos laterales y medio donde evaluaremos la funcion
x.ends=seq(a,b,length.out=m+1)
print(x.ends)
y.ends=f(x.ends)
print(y.ends)
x.mids=(x.ends[2:(m+1)]-x.ends[1:m])/2+x.ends[1:m]
print(x.mids)
y.mids=f(x.mids)
print(y.mids)
# de tal forma que el area correspondera a la sumade 4 veces los valores intermedios,
# dos veces los valores laterales y solo añadiremos
# una vez cada valor extremo
print(y.ends[2:(m+1)])
print(y.ends[1:m])
p.area=sum(y.ends[2:(m+1)]+4*y.mids [1: m ]+y.ends[1:m])
p.area=p.area * abs(b - a) / (6 * m)
return(p.area)
}
simp(phi,0,2,10)
x=runif(m,min=a,max=b)
x
mcint(phi,0,-3,100)
trap(phi,0,-1,2)
trap(phi,0,1,2)
trap(phi,0,10,2)
1-trap(phi,0,-10,2)
PhiT()
PhiT(2)
PhiT(1)
PhiT(-1)
PhiT(-2)
PhiT(2)
# esta funcion recibe 4 paramtros
# f: la funcion a la que se aplicará el metodo
# a: límite inferior del area a aproximar
# b: límite superior del area a aproximar
# m: numero de numeros aleatorios
mcint=function(f,a,b,m)
{
# para generar los mismos numeros aleatorios utilizamos la siguiente linea de codigo
set.seed(5)
# con la funcion runif indicamos el valor maximo y minimo para u numero m de valores aleatorios
x=runif(m,min=a,max=b)
y.hat=f(x)
area=area <- (b - a) * sum(y.hat) / m
return(area)
}
rMC=c()
for(i in c(2,10,100,2000)){
a= mcint(phi,0,1,i)
rMC=c(rMC,a)
}
# tenemos los valores de la funcion simp para un x=1 y 2,10,100 y 100 subintervalores
# vemos que ya con 1000 subintervalos nos da un resultado adecuado
rMC
PhiMCpos=function(x)
{
return(0.5+mcint(phi,0,x,1000))
}
PhiMC=function(x)
{
if(x>=0) return(PhiMCpos(x))
else return(1-PhiMCpos(-x))
}
PhiMC=function(x)
{
if(x>=0) return(PhiMCpos(x))
else return(1-PhiMCpos(-x))
}
