fP = eva(tt)# Evaluar la aproximaciÃ³n mediante ajuste lineal polinÃ³mico con grado 'n' en los puntos 'tt'
myf_Legendre(tt, ckL)
# Dados los coeficients del ajuste polinÃ³mico, retorna la funciÃ³n aproximada evaluada en 'x'
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = f + c*x[i]# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
return(a)
}
ckp
ckP
f = f + c[i]# Construir la aproximaciÃ³n lineal polinÃ³mica
# Dados los coeficients del ajuste polinÃ³mico, retorna la funciÃ³n aproximada evaluada en 'x'
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = f + c[i]# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
return(a)
}
myeval(tt,ckP)
ckP = lout[[1]]
ckP
ckP[1]
0+ckP[1]
0+ckP[1]+ckP[2]
# Dados los coeficients del ajuste polinÃ³mico, retorna la funciÃ³n aproximada evaluada en 'x'
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = c(f,c[i])# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
return(a)
}
myeval(tt,ckP)
# Dados los coeficients del ajuste polinÃ³mico, retorna la funciÃ³n aproximada evaluada en 'x'
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = c(f,c[i])# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
return(a)
}
c[i]
ckP[1]
ckP
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = c(f,c[i])# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
b <- as.function(a)
return(b(x))
}
myeval(tt,ckP)
eva =
fP = myeval(tt,ckP)# Evaluar la aproximaciÃ³n mediante ajuste lineal polinÃ³mico con grado 'n' en los puntos 'tt'
fp
fP
lines(tt, fL, col='red', lwd=1)
lines(tt, fP, col='green', lwd=3)
####### Ejercicio 2 #######
n=10
## Ajuste polinÃ³mico
lout = lsfit(myPhi(x,n),Y) # Argumentos: Matriz con los datos evaluados en las funciones base (Phi) y lado derecho
ckP = lout[[1]]
ckP
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n mediante Legendre con grado 'n' en los puntos 'tt'
eva =
fP = myeval(tt,ckP)# Evaluar la aproximaciÃ³n mediante ajuste lineal polinÃ³mico con grado 'n' en los puntos 'tt'
plot(t,Y) # Representar los datos
lines(tt, fL, col='red', lwd=1)
lines(tt, fP, col='green', lwd=3)
Comenzamos cargando las la libreria necesaria
```{r}
library(polynom)
```{r}
library(polynom)
```{r}
```{r}
# recibe n , la derivada enesima solicitada
nth_diff <- function(n){
# polinomio base
pol <- c(-1,0,1)
#elevamos a la potencia de enesima
a <- polynomial(pol)^n
# derivamos recursivamente segun n
for(k in 1:n){
a <- deriv(a)
}
return(a)
}
# recibe n , la derivada enesima solicitada
nth_diff <- function(n){
# polinomio base
pol <- c(-1,0,1)
#elevamos a la potencia de enesima
a <- polynomial(pol)^n
# derivamos recursivamente segun n
for(k in 1:n){
a <- deriv(a)
}
return(a)
}
my_legendre = function(x, n){
m = length(x)
#p <- c(-1,0,1)
L = matrix(1, n+1, m)
if (n > 0){
L[2, ] = x# Coeficiente L1
}
if (n > 1)
for (k in 1:(n-1)){
pol <- as.function(nth_diff(k+1)*(2^(k+1)*factorial(k+1))^-1)
L[k+2, ] = pol(x)
}
return(L)
}
# Creamos otra funcion auxiliar que nos permitira realizar el cambio de varible y evaluar la aproximacion en lo punto tt
myf_Legendre = function(t, ck){
x = (2*t-(a+b))/(b-a)
# Cambio de variables
Lk = my_legendre(x, n)
return(colSums(ck*Lk))
}
# definimos la funcion para cargar los datos en un rango de fechas, asi como la columna que nos interesa
myReadData_byDate = function(file, date_ini, date_fin, column){
df = read.csv(file, sep = ',', row.names = 1)
idx_Dates = as.character( seq(as.Date(date_ini, format = '%d/%m/%Y'), as.Date(date_fin, format = '%d/%m/%Y'), 'days') )
return( na.omit(df[idx_Dates, column]) )
}
# cargamos los nuevos casos registrados entre las fechas 01/12/2020 y 31/03/2021
Y = myReadData_byDate('WHO-COVID-19-global-data-SPAIN.csv', '01/12/2020', '31/03/2021', 'New_cases') # asignamos las variables y graficamos
m = length(Y)
t = 1:m
plot(t,Y)
# primer dia o dia 1
a = 1
# ultimo dia
b = length(Y)
# cambio de variable
x = (2*t-(a+b))/(b-a)
# primer dia o dia 1
a = 1
# ultimo dia
b = length(Y)
# cambio de variable
x = (2*t-(a+b))/(b-a)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
lines(tt, fL, col=color[i], lwd=3)
####### Ejercicio 1 #######
## Cambio de variable
a = 1
b = length(Y)
x = (2*t-(a+b))/(b-a) # Definir el cambio de variable adecuado a partir de 'a' y 'b'
#x=0.5*(a+b)+0.5*(b-a)*t
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
# Clear the workspace
rm(list = ls())
# Importamos la funciÃ³n de lectura de datos
source('Lectura_datos_por_fecha.R')
# FunciÃ³n que evalÃºa los polinomios de Legendre hasta grado 'n' en 'x' (que puede ser un vector)
nth_diff <- function(n){
pol <- c(-1,0,1)
a <- polynomial(pol)^n
for(k in 1:n){
a <- deriv(a)
}
return(a)
}
my_legendre = function(x, n){
m = length(x)
#p <- c(-1,0,1)
L = matrix(1, n+1, m)
if (n > 0){
L[2, ] = x# Coeficiente L1
}
if (n > 1)
for (k in 1:(n-1)){
pol <- as.function(nth_diff(k+1)*(2^(k+1)*factorial(k+1))^-1)
L[k+2, ] = pol(x)
}
return(L)
}
# Dados los coeficients de Legendre, retorna la funciÃ³n aproximada evaluada en 't' (que puede ser un vector)
myf_Legendre = function(t, ck){
x = (2*t-(a+b))/(b-a)
# Cambio de variables
Lk = my_legendre(x, n)
return(colSums(ck*Lk))
}
# ImplementaciÃ³n de la derivaciÃ³n numÃ©rica
my_diff = function(f,h){
return ((f(x + h) - f(x)) / h)
}
# ContrucciÃ³n de la matriz de los datos evaluados en las funciones base (Phi)
myPhi = function(x, n){
Phi = matrix(1, length(x), n+1)
for (i in 1:n) {
Phi[, i+1] =x # funciones base para el ajuste polinÃ³mico
}
return(Phi)
}
# Dados los coeficients del ajuste polinÃ³mico, retorna la funciÃ³n aproximada evaluada en 'x'
myeval = function(x, c){
f = 0
for (i in 1:length(c)) {
f = c(f,c[i])# Construir la aproximaciÃ³n lineal polinÃ³mica
}
a <- polynomial(f)
b <- as.
return(a)
}
### Lectura de datos ###
# En 'Y' almacenamos los valores de casos nuevos y en 't' los dÃ­as
Y = myReadData_byDate('WHO-COVID-19-global-data-SPAIN.csv', '01/12/2020', '31/03/2021', 'New_cases') # Incluir fechas y etiqueta
m = length(Y)
t = 1:m # Definir la variable que representa a los dÃ­as
plot(t,Y) # Representar los datos
####### Ejercicio 1 #######
## Cambio de variable
a = 1
b = length(Y)
x = (2*t-(a+b))/(b-a) # Definir el cambio de variable adecuado a partir de 'a' y 'b'
#x=0.5*(a+b)+0.5*(b-a)*t
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
lines(tt, fL, col=color[i], lwd=3)
```{r}
# definimos la funcion para cargar los datos en un rango de fechas, asi como la columna que nos interesa
myReadData_byDate = function(file, date_ini, date_fin, column){
df = read.csv(file, sep = ',', row.names = 1)
idx_Dates = as.character( seq(as.Date(date_ini, format = '%d/%m/%Y'), as.Date(date_fin, format = '%d/%m/%Y'), 'days') )
return( na.omit(df[idx_Dates, column]) )
}
# cargamos los nuevos casos registrados entre las fechas 01/12/2020 y 31/03/2021
Y = myReadData_byDate('WHO-COVID-19-global-data-SPAIN.csv', '01/12/2020', '31/03/2021', 'New_cases') # asignamos las variables y graficamos
m = length(Y)
t = 1:m
plot(t,Y)
# primer dia o dia 1
a = 1
# ultimo dia
b = length(Y)
x = (2*t-(a+b))/(b-a)
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
plot.new()
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
dev.off()
plot.new()
plot(t,Y)
dev.off()
dev.off()
plot.new()
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
# recibe n , la derivada enesima solicitada
nth_diff <- function(n){
# polinomio base
pol <- c(-1,0,1)
#elevamos a la potencia de enesima
a <- polynomial(pol)^n
# derivamos recursivamente segun n
for(k in 1:n){
a <- deriv(a)
}
return(a)
}
Ahora calcularemos la matrix $kxk$ con los resultados de las evaluaciones del polinomio de legendre para los valores del vector  x $\in$ [-1,1] , para un grado $n$
```{r}
my_legendre = function(x, n){
m = length(x)
#p <- c(-1,0,1)
L = matrix(1, n+1, m)
if (n > 0){
L[2, ] = x# Coeficiente L1
}
if (n > 1)
for (k in 1:(n-1)){
pol <- as.function(nth_diff(k+1)*(2^(k+1)*factorial(k+1))^-1)
L[k+2, ] = pol(x)
}
return(L)
}
# Creamos otra funcion auxiliar que nos permitira realizar el cambio de varible y evaluar la aproximacion en lo punto tt
myf_Legendre = function(t, ck){
x = (2*t-(a+b))/(b-a)
# Cambio de variables
Lk = my_legendre(x, n)
return(colSums(ck*Lk))
}
Ahora cargaremos os datos solicitados en le pregunta
```{r}
# definimos la funcion para cargar los datos en un rango de fechas, asi como la columna que nos interesa
myReadData_byDate = function(file, date_ini, date_fin, column){
df = read.csv(file, sep = ',', row.names = 1)
idx_Dates = as.character( seq(as.Date(date_ini, format = '%d/%m/%Y'), as.Date(date_fin, format = '%d/%m/%Y'), 'days') )
return( na.omit(df[idx_Dates, column]) )
# definimos la funcion para cargar los datos en un rango de fechas, asi como la columna que nos interesa
myReadData_byDate = function(file, date_ini, date_fin, column){
df = read.csv(file, sep = ',', row.names = 1)
idx_Dates = as.character( seq(as.Date(date_ini, format = '%d/%m/%Y'), as.Date(date_fin, format = '%d/%m/%Y'), 'days') )
return( na.omit(df[idx_Dates, column]) )
}
# cargamos los nuevos casos registrados entre las fechas 01/12/2020 y 31/03/2021
Y = myReadData_byDate('WHO-COVID-19-global-data-SPAIN.csv', '01/12/2020', '31/03/2021', 'New_cases') # asignamos las variables y graficamos
m = length(Y)
t = 1:m
plot(t,Y)
# primer dia o dia 1
a = 1
# ultimo dia
b = length(Y)
x = (2*t-(a+b))/(b-a)
dev.off()
plot.new()
plot(t,Y)
N = c(2,4,6,8,10)
color = c('cyan', 'yellow', 'magenta', 'blue', 'red')
#plot(NA, ylim = c(2000, 20000), xlim = c(0, 200))
for(i in 1:length(N)) {
n = N[i]
## Polinomios de Legendre
Lk = my_legendre(x, n)
Ak <- c()
for(w in 1:(n+1)){
o <- 2/(2*(w-1)+1)
Ak <- c(Ak,o)
}# TÃ©rminos de ortogonalidad
fLk = as.vector( Lk%*%Y )
#ckL = (2/(b - a))*fLk/Ak
ckL = (2/(b - a))*fLk/Ak
## RepresentaciÃ³n grÃ¡fica
hh = 0.01
tt = seq(a, b, hh)
fL = myf_Legendre(tt, ckL)# Evaluar la aproximaciÃ³n con grado 'n' en los puntos 'tt'
lines(tt, fL, col=color[i], lwd=3)
}
